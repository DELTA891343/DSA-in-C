#include <stdio.h>
#include <stdlib.h>

// Define a node structure
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Define the head of the list
struct Node* head = NULL;

// Function to append a new node to the list
void append(int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    new_node->prev = NULL;

    if (head == NULL) {
        head = new_node;
        return;
    }

    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = new_node;
    new_node->prev = temp;
}

// Function to insert a node at a specific position in the list
void insert_at_position(int data, int position) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    new_node->prev = NULL;

    if (position == 0) {
        new_node->next = head;
        if (head != NULL) {
            head->prev = new_node;
        }
        head = new_node;
        return;
    }

    struct Node* temp = head;
    for (int i = 0; i < position - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Position out of bounds\n");
        free(new_node);
        return;
    }

    new_node->next = temp->next;
    if (temp->next != NULL) {
        temp->next->prev = new_node;
    }
    temp->next = new_node;
    new_node->prev = temp;
}

// Function to search for a node in the list
int search(int key) {
    struct Node* temp = head;
    int position = 0;

    while (temp != NULL) {
        if (temp->data == key) {
            return position;
        }
        temp = temp->next;
        position++;
    }

    return -1; // Not found
}

// Function to delete a node from the list
int delete(int key) {
    struct Node* temp = head;

    // If the list is empty
    if (temp == NULL) {
        return 0;
    }

    // If the node to be deleted is the head node
    if (temp->data == key) {
        head = temp->next;
        if (head != NULL) {
            head->prev = NULL;
        }
        free(temp);
        return 1;
    }

    // Traverse to find the node to delete
    while (temp != NULL) {
        if (temp->data == key) {
            if (temp->next != NULL) {
                temp->next->prev = temp->prev;
            }
            if (temp->prev != NULL) {
                temp->prev->next = temp->next;
            }
            free(temp);
            return 1;
        }
        temp = temp->next;
    }

    return 0; // Key not found
}

// Function to count the number of nodes in the list
int count_nodes() {
    int count = 0;
    struct Node* temp = head;

    while (temp != NULL) {
        count++;
        temp = temp->next;
    }

    return count;
}

// Function to display the list
void display() {
    struct Node* temp = head;

    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function for testing
int main() {
    append(10);
    append(20);
    append(30);

    printf("Initial List:\n");
    display();

    // Insert at specific positions
    insert_at_position(15, 1);
    insert_at_position(5, 0);
    insert_at_position(35, 5); // Out of bounds

    printf("List after insertions:\n");
    display();

    // Search for a node
    int key = 20;
    int position = search(key);
    if (position != -1) {
        printf("Node with value %d is at position: %d\n", key, position);
    } else {
        printf("Node with value %d not found.\n", key);
    }

    // Delete a node
    int delete_key = 20;
    if (delete(delete_key)) {
        printf("Node with value %d deleted.\n", delete_key);
    } else {
        printf("Node with value %d not found.\n", delete_key);
    }

    // Display the list after deletion
    printf("List after deletion:\n");
    display();

    // Count the number of nodes
    printf("Number of nodes in the list: %d\n", count_nodes());

    return 0;
}
